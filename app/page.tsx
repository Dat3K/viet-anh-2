'use client'

import { useRouter } from 'next/navigation'
import { useEffect } from 'react'
import { AppLayout } from '@/components/layout/app-layout'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Skeleton } from "@/components/ui/skeleton"
import { Badge } from "@/components/ui/badge"
import {
  FileText,
  Plus,
  History,
  CheckCircle,
  ArrowRight,
  Users,
  Shield,
  BookOpen,
  School,
  ClipboardCheck
} from "lucide-react"
import Link from 'next/link'
import { useAuth } from '@/hooks/use-auth'
import { useApprovalPermission } from '@/hooks/use-approval-permission'
import { useUserProfile } from '@/hooks/use-profile'

export default function Home() {
  const { user, isLoading: authLoading } = useAuth()
  const router = useRouter()

  useEffect(() => {
    if (!authLoading && !user) {
      router.push('/auth/login')
    }
  }, [user, authLoading, router])

  if (authLoading) {
    return (
      <AppLayout>
        <HomeSkeleton />
      </AppLayout>
    )
  }

  if (!user) {
    return null
  }

  return (
    <AppLayout>
      <HomeContent />
    </AppLayout>
  )
}

function HomeSkeleton() {
  return (
    <div suppressHydrationWarning className="space-y-6">
      {/* Hero Section Skeleton */}
      <div suppressHydrationWarning className="text-center space-y-4">
        <Skeleton className="h-8 w-48 mx-auto" />
        <Skeleton className="h-12 w-96 mx-auto" />
        <Skeleton className="h-6 w-64 mx-auto" />
      </div>

      {/* Main Features Skeleton */}
      <div suppressHydrationWarning>
        <Skeleton className="h-6 w-48 mb-4" />
        <div suppressHydrationWarning className="grid gap-4 md:grid-cols-2">
          {Array.from({ length: 4 }).map((_, i) => (
            <Card key={i}>
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="flex items-center gap-3">
                    <Skeleton className="h-12 w-12 rounded-lg" />
                    <div className="space-y-2">
                      <Skeleton className="h-5 w-32" />
                      <Skeleton className="h-4 w-48" />
                    </div>
                  </div>
                  <Skeleton className="h-5 w-5" />
                </div>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="flex items-center justify-between">
                  <Skeleton className="h-4 w-20" />
                  <Skeleton className="h-8 w-20 rounded" />
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* System Info Skeleton */}
      <div suppressHydrationWarning className="grid md:grid-cols-3 gap-6">
        {Array.from({ length: 3 }).map((_, i) => (
          <Card key={i}>
            <CardHeader className="text-center">
              <Skeleton className="h-12 w-12 mx-auto mb-4" />
              <Skeleton className="h-6 w-32 mx-auto" />
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {Array.from({ length: 4 }).map((_, j) => (
                  <Skeleton key={j} className="h-4 w-full" />
                ))}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}

function HomeContent() {
  const { canApprove } = useApprovalPermission()
  const { profile } = useUserProfile()
  
  const allFeatures = [
    {
      title: "T·∫°o y√™u c·∫ßu v·∫≠t t∆∞",
      description: "T·∫°o y√™u c·∫ßu m·ªõi cho v·∫≠t t∆∞ v√† thi·∫øt b·ªã gi·∫£ng d·∫°y",
      icon: Plus,
      href: "/supply-requests/create",
      color: "bg-blue-500",
      showForAll: true
    },
    {
      title: "L·ªãch s·ª≠ y√™u c·∫ßu",
      description: "Xem v√† qu·∫£n l√Ω t·∫•t c·∫£ y√™u c·∫ßu ƒë√£ t·∫°o",
      icon: History,
      href: "/supply-requests/history",
      color: "bg-green-500",
      showForAll: true
    },
    {
      title: "Ph√™ duy·ªát y√™u c·∫ßu",
      description: "Duy·ªát c√°c y√™u c·∫ßu t·ª´ gi√°o vi√™n kh√°c",
      icon: CheckCircle,
      href: "/supply-requests/approve",
      color: "bg-purple-500",
      requiresApproval: true
    },
    {
      title: "Danh s√°ch y√™u c·∫ßu",
      description: "Xem t·∫•t c·∫£ y√™u c·∫ßu trong h·ªá th·ªëng",
      icon: FileText,
      href: "/supply-requests",
      color: "bg-orange-500",
      requiresApproval: true
    }
  ]

  // Filter features based on permissions
  const mainFeatures = allFeatures.filter(feature => {
    if (feature.showForAll) return true
    if (feature.requiresApproval && canApprove) return true
    return false
  })

  // Filter user roles to show only the current user's role
  const getCurrentUserRole = () => {
    if (!profile?.role?.name) return null
    
    const allUserRoles = [
      {
        title: "Gi√°o Vi√™n",
        icon: BookOpen,
        color: "text-blue-500",
        description: "T·∫°o v√† theo d√µi y√™u c·∫ßu v·∫≠t t∆∞ gi·∫£ng d·∫°y",
        features: [
          "T·∫°o y√™u c·∫ßu v·∫≠t t∆∞ gi·∫£ng d·∫°y",
          "Theo d√µi ti·∫øn tr√¨nh duy·ªát",
          "Xem l·ªãch s·ª≠ y√™u c·∫ßu c·ªßa b·∫£n th√¢n",
          "Nh·∫≠n th√¥ng b√°o c·∫≠p nh·∫≠t"
        ],
        roleNames: ['teacher', 'giao_vien']
      },
      {
        title: "Tr∆∞·ªüng B·ªô M√¥n",
        icon: Shield,
        color: "text-green-500",
        description: "Duy·ªát v√† qu·∫£n l√Ω y√™u c·∫ßu trong b·ªô m√¥n",
        features: [
          "Duy·ªát y√™u c·∫ßu c·ªßa gi√°o vi√™n",
          "Ch·ªânh s·ª≠a danh s√°ch v·∫≠t t∆∞",
          "Qu·∫£n l√Ω b·ªô m√¥n c·ªßa m√¨nh",
          "Theo d√µi th·ªëng k√™ b·ªô m√¥n"
        ],
        roleNames: ['department_head', 'truong_bo_mon', 'head']
      },
      {
        title: "Ban Gi√°m Hi·ªáu",
        icon: School,
        color: "text-purple-500",
        description: "Qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng",
        features: [
          "Ph√™ duy·ªát cu·ªëi c√πng",
          "Qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng",
          "Xem b√°o c√°o t·ªïng th·ªÉ",
          "C·∫•u h√¨nh quy tr√¨nh duy·ªát"
        ],
        roleNames: ['admin', 'ban_giam_hieu', 'principal', 'director']
      }
    ]

    const userRole = allUserRoles.find(role => 
      role.roleNames.some(name => 
        profile.role?.name?.toLowerCase().includes(name.toLowerCase())
      )
    )
    
    return userRole || allUserRoles[0] // Default to teacher role if no match
  }

  const userRole = getCurrentUserRole()
  const userRoles = userRole ? [userRole] : []

  return (
    <div suppressHydrationWarning className="space-y-8">
      {/* Hero Section */}
      <div suppressHydrationWarning className="text-center space-y-4">
        <Badge variant="secondary" className="mb-4">
          üè´ Tr∆∞·ªùng Trung Ti·ªÉu H·ªçc Vi·ªát Anh
        </Badge>
        <h1 className="text-4xl md:text-5xl font-bold tracking-tight">
          H·ªá Th·ªëng Qu·∫£n L√Ω
          <span className="text-primary block">Y√™u C·∫ßu Tr∆∞·ªùng H·ªçc</span>
        </h1>
        <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
          H·ªá th·ªëng qu·∫£n l√Ω y√™u c·∫ßu hi·ªán ƒë·∫°i. D√†nh cho gi√°o vi√™n, tr∆∞·ªüng b·ªô m√¥n v√† ban gi√°m hi·ªáu
          ƒë·ªÉ qu·∫£n l√Ω quy tr√¨nh duy·ªát y√™u c·∫ßu v·∫≠t t∆∞ v√† t√†i li·ªáu m·ªôt c√°ch hi·ªáu qu·∫£.
        </p>
      </div>

      {/* Main Features */}
      <div suppressHydrationWarning>
        <h2 className="text-2xl font-semibold mb-6">Ch·ª©c NƒÉng H·ªá Th·ªëng</h2>
        <div suppressHydrationWarning className="grid gap-4 md:grid-cols-2">
          {mainFeatures.map((feature) => (
            <Card key={feature.title} className="hover:shadow-lg transition-all duration-200 cursor-pointer group">
              <Link href={feature.href}>
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`p-3 rounded-lg ${feature.color}`}>
                        <feature.icon className="h-6 w-6 text-white" />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{feature.title}</CardTitle>
                        <p className="text-sm text-muted-foreground mt-1">
                          {feature.description}
                        </p>
                      </div>
                    </div>
                    <ArrowRight className="h-5 w-5 text-muted-foreground group-hover:text-foreground group-hover:translate-x-1 transition-all" />
                  </div>
                </CardHeader>
              </Link>
            </Card>
          ))}
        </div>
      </div>

      {/* User Roles */}
      {userRoles.length > 0 && (
        <div suppressHydrationWarning>
          <h2 className="text-2xl font-semibold mb-6">Vai Tr√≤ C·ªßa B·∫°n</h2>
          <div suppressHydrationWarning className="grid md:grid-cols-3 gap-6">
            {userRoles.map((role) => (
              <Card key={role.title} className="text-center hover:shadow-lg transition-shadow">
                <CardHeader>
                  <role.icon className={`h-12 w-12 mx-auto mb-4 ${role.color}`} />
                  <CardTitle>{role.title}</CardTitle>
                  <p className="text-sm text-muted-foreground">{role.description}</p>
                </CardHeader>
                <CardContent>
                  <ul className="text-sm text-muted-foreground space-y-2 text-left">
                    {role.features.map((feature, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0 mt-0.5" />
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      )}

      {/* System Features */}
      <Card suppressHydrationWarning>
        <CardHeader suppressHydrationWarning>
          <CardTitle className="text-center mb-6">T√≠nh NƒÉng Ch√≠nh</CardTitle>
        </CardHeader>
        <CardContent suppressHydrationWarning>
          <div suppressHydrationWarning className="grid md:grid-cols-2 gap-4">
            {[
              'T·∫°o y√™u c·∫ßu v·∫≠t t∆∞ ƒë·ªông',
              'Giao di·ªán th√¢n thi·ªán cho t·∫•t c·∫£ vai tr√≤',
              'Quy tr√¨nh duy·ªát t·ª± ƒë·ªông theo c·∫•p b·∫≠c',
              'Th√¥ng b√°o th·ªùi gian th·ª±c',
              'Giao di·ªán th√¢n thi·ªán tr√™n m·ªçi thi·∫øt b·ªã',
              'Ch·∫ø ƒë·ªô s√°ng/t·ªëi linh ho·∫°t',
              'B√°o c√°o th·ªëng k√™ chi ti·∫øt',
              'L·ªãch s·ª≠ thay ƒë·ªïi v√† ki·ªÉm so√°t',
              'Ph√¢n quy·ªÅn theo vai tr√≤ gi·∫£ng d·∫°y',
              'T√≠ch h·ª£p v·ªõi h·ªá th·ªëng tr∆∞·ªùng h·ªçc',
              'Sao l∆∞u v√† b·∫£o m·∫≠t d·ªØ li·ªáu',
              'H·ªó tr·ª£ ti·∫øng Vi·ªát ho√†n ch·ªânh'
            ].map((feature, index) => (
              <div key={index} suppressHydrationWarning className="flex items-center gap-3">
                <CheckCircle className="h-5 w-5 text-green-500 flex-shrink-0" />
                <span className="text-sm">{feature}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}